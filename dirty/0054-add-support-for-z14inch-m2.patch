From 4b4ea002956cc153c83a296d042ba5e73c574c6e Mon Sep 17 00:00:00 2001
From: Lu Hui <luhui@sipeed.com>
Date: Thu, 30 Nov 2023 19:12:03 +0800
Subject: [PATCH 54/54] add support for z14inch-m2

---
 arch/riscv/boot/dts/thead/Makefile            |   1 +
 .../boot/dts/thead/light-lpi4a-console.dts    |  16 +
 .../boot/dts/thead/light-lpi4a-laptop.dts     |  14 -
 .../dts/thead/light-lpi4a-z14inch-m2-16g.dts  |  17 +
 .../boot/dts/thead/light-lpi4a-z14inch-m2.dts |  62 +++
 arch/riscv/configs/revyos_defconfig           |   2 +-
 drivers/gpu/drm/panel/Kconfig                 |  11 +
 drivers/gpu/drm/panel/Makefile                |   1 +
 .../panel/panel-z14inch_22k_2240x1400_30Hz.c  | 356 ++++++++++++++++++
 9 files changed, 465 insertions(+), 15 deletions(-)
 create mode 100644 arch/riscv/boot/dts/thead/light-lpi4a-z14inch-m2-16g.dts
 create mode 100644 arch/riscv/boot/dts/thead/light-lpi4a-z14inch-m2.dts
 create mode 100644 drivers/gpu/drm/panel/panel-z14inch_22k_2240x1400_30Hz.c

diff --git a/arch/riscv/boot/dts/thead/Makefile b/arch/riscv/boot/dts/thead/Makefile
index 14e66bd9b..5636bc509 100644
--- a/arch/riscv/boot/dts/thead/Makefile
+++ b/arch/riscv/boot/dts/thead/Makefile
@@ -51,6 +51,7 @@ dtb-$(CONFIG_SOC_THEAD) += light-lpi4a-console.dtb light-lpi4a-console-16g.dtb
 dtb-$(CONFIG_SOC_THEAD) += light-lpi4a-z14inch-m0.dtb light-lpi4a-z14inch-m0-16g.dtb
 dtb-$(CONFIG_SOC_THEAD) += light-lpi4a-z14inch-m1.dtb
 dtb-$(CONFIG_SOC_THEAD) += light-lpi4a-z15inch-m1.dtb
+dtb-$(CONFIG_SOC_THEAD) += light-lpi4a-z14inch-m2.dtb light-lpi4a-z14inch-m2-16g.dtb
 
 targets += dtbs dtbs_install
 targets += $(dtb-y)
diff --git a/arch/riscv/boot/dts/thead/light-lpi4a-console.dts b/arch/riscv/boot/dts/thead/light-lpi4a-console.dts
index 4d83f763c..9b6da691d 100644
--- a/arch/riscv/boot/dts/thead/light-lpi4a-console.dts
+++ b/arch/riscv/boot/dts/thead/light-lpi4a-console.dts
@@ -33,6 +33,22 @@ &cw2015 {
 	>;
 };
 
+&i2c3 {
+	touch@14 {
+                #gpio-cells = <2>;
+                compatible = "goodix,gt9271";
+                reg = <0x14>;
+                interrupt-parent = <&ao_gpio_porta>;
+                interrupts = <3 0>;
+                irq-gpios = <&ao_gpio_porta 3 0>;
+                reset-gpios = <&pcal6408ahk_d 0 0>;
+                touchscreen-size-x = <1024>;
+                touchscreen-size-y = <600>;
+                tp-size = <9271>;
+                status = "okay";
+	};
+};
+
 &lcd0_backlight {
         default-brightness-level = <50>;
 };
diff --git a/arch/riscv/boot/dts/thead/light-lpi4a-laptop.dts b/arch/riscv/boot/dts/thead/light-lpi4a-laptop.dts
index 667bf69ef..005adb5d9 100644
--- a/arch/riscv/boot/dts/thead/light-lpi4a-laptop.dts
+++ b/arch/riscv/boot/dts/thead/light-lpi4a-laptop.dts
@@ -160,20 +160,6 @@ cw2015: cw2015@62 {
 };
 
 &i2c3 {
-	touch@14 {
-		#gpio-cells = <2>;
-		compatible = "goodix,gt9271";
-		reg = <0x14>;
-		interrupt-parent = <&ao_gpio_porta>;
-		interrupts = <3 0>;
-		irq-gpios = <&ao_gpio_porta 3 0>;
-		reset-gpios = <&pcal6408ahk_d 0 0>;
-		touchscreen-size-x = <1024>;
-		touchscreen-size-y = <600>;
-		tp-size = <9271>;
-		status = "okay";
-	};
-
 	lt8911: lt8911@29 {
 		compatible = "lontium,lt8911exb";
 		reg = <0x29>;
diff --git a/arch/riscv/boot/dts/thead/light-lpi4a-z14inch-m2-16g.dts b/arch/riscv/boot/dts/thead/light-lpi4a-z14inch-m2-16g.dts
new file mode 100644
index 000000000..d45d9bc7b
--- /dev/null
+++ b/arch/riscv/boot/dts/thead/light-lpi4a-z14inch-m2-16g.dts
@@ -0,0 +1,17 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (C) 2022 Alibaba Group Holding Limited.
+ */
+
+#include "light-lpi4a-z14inch-m2.dts"
+
+/ {
+	memory@0 {
+		device_type = "memory";
+		reg = <0x0 0x200000 0x3 0xffe00000>;
+	};
+};
+
+&cmamem {
+	alloc-ranges = <0x3 0xe4000000 0 0x14000000>; // [0x3E400_0000 ~ 0x3F800_0000]
+};
diff --git a/arch/riscv/boot/dts/thead/light-lpi4a-z14inch-m2.dts b/arch/riscv/boot/dts/thead/light-lpi4a-z14inch-m2.dts
new file mode 100644
index 000000000..a78fa6015
--- /dev/null
+++ b/arch/riscv/boot/dts/thead/light-lpi4a-z14inch-m2.dts
@@ -0,0 +1,62 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (C) 2023 Sipeed.
+ */
+
+#include "light-lpi4a-laptop.dts"
+
+/ {
+        model = "T-HEAD Light Lichee Pi 4A configuration for Z14INCH-M2";
+};
+
+&dsi0_panel0 {
+	compatible = "custom,z14inch_22k_2240x1400_30Hz";
+};
+
+&cw2015 {
+	cellwise,battery-profile = /bits/ 8 <
+		0x17 0x67 0x72 0x68 0x66 0x63 0x62 0x5A
+		0x64 0x61 0x4D 0x57 0x5A 0x51 0x43 0x38
+		0x31 0x2A 0x24 0x22 0x29 0x31 0x3E 0x4C
+		0x29 0x4D 0x0B 0x85 0x1C 0x38 0x47 0x57
+		0x5D 0x5E 0x5F 0x60 0x3F 0x1A 0x6F 0x41
+		0x0A 0x43 0x12 0x38 0x7B 0x95 0x9A 0x18
+		0x4B 0x6F 0x9E 0xD5 0x80 0x57 0x87 0xCB
+		0x2F 0x00 0x64 0xA5 0xB5 0x13 0x54 0xB9
+	>;
+};
+
+&lt8911 {
+	lontium,pclk = <123750000>;
+	lontium,hact = <2240>;
+	lontium,vact = <1400>;
+	lontium,hbp = <328>;
+	lontium,hfp = <104>;
+	lontium,vbp = <18>;
+	lontium,vfp = <3>;
+	lontium,hs = <224>;
+	lontium,vs = <6>;
+	lontium,mipi_lane = <0x02>;
+	lontium,lane_cnt = <0x02>;
+	lontium,color = <0x01>;
+	lontium,test = <0>;
+};
+
+&lcd0_backlight {
+        default-brightness-level = <100>;
+};
+
+&i2c3 {
+	touch@5d {
+		#gpio-cells = <0x02>;
+		compatible = "goodix,gt9110";
+		reg = <0x5d>;
+                interrupt-parent = <&ao_gpio_porta>;
+                interrupts = <3 0>;
+                irq-gpios = <&ao_gpio_porta 3 0>;
+                reset-gpios = <&pcal6408ahk_d 0 0>;
+		touchscreen-size-x = <0x556>;
+		touchscreen-size-y = <0x300>;
+		status = "okay";
+	};
+};
diff --git a/arch/riscv/configs/revyos_defconfig b/arch/riscv/configs/revyos_defconfig
index f2d498d02..63b459376 100644
--- a/arch/riscv/configs/revyos_defconfig
+++ b/arch/riscv/configs/revyos_defconfig
@@ -282,7 +282,7 @@ CONFIG_DRM_PANEL_ILITEK_ILI9881C=y
 CONFIG_DRM_PANEL_ILI9881D=y
 CONFIG_DRM_PANEL_HX8394=y
 CONFIG_DRM_PANEL_JADARD_JD9365DA_H3=y
-CONFIG_DRM_PANEL_MINGJUN_070BI30IA2=y
+CONFIG_DRM_PANEL_Z14INCH_22K_2240X1400_30HZ=y
 CONFIG_DRM_VERISILICON=y
 CONFIG_DRM_POWERVR_ROGUE=m
 CONFIG_BACKLIGHT_CLASS_DEVICE=y
diff --git a/drivers/gpu/drm/panel/Kconfig b/drivers/gpu/drm/panel/Kconfig
index d131b7e7e..76e235d32 100644
--- a/drivers/gpu/drm/panel/Kconfig
+++ b/drivers/gpu/drm/panel/Kconfig
@@ -538,4 +538,15 @@ config DRM_PANEL_MINGJUN_070BI30IA2
 	  Say Y here if you want to enable support for MingJun 070BI30IA2
 	  MIPI DSI panel. The panel support TFT dot matrix LCD with
 	  800RGBx1280 dots at maximum.
+
+config DRM_PANEL_Z14INCH_22K_2240X1400_30HZ
+        tristate "14inch 2.2K 2240x1400 30Hz DSI panel"
+        depends on OF
+        depends on DRM_MIPI_DSI
+        depends on BACKLIGHT_CLASS_DEVICE
+        help
+          Say Y here if you want to enable support for 
+          MIPI DSI panel. The panel support TFT dot matrix LCD with
+          2240RGBx1400 dots at maximum.
+
 endmenu
diff --git a/drivers/gpu/drm/panel/Makefile b/drivers/gpu/drm/panel/Makefile
index fabee1b79..6519acdb9 100644
--- a/drivers/gpu/drm/panel/Makefile
+++ b/drivers/gpu/drm/panel/Makefile
@@ -57,3 +57,4 @@ obj-$(CONFIG_DRM_PANEL_ILI9881D) += panel-ili9881d.o
 obj-$(CONFIG_DRM_PANEL_HX8394) += panel-himax8394.o
 obj-$(CONFIG_DRM_PANEL_JADARD_JD9365DA_H3) += panel-jadard-jd9365da-h3.o
 obj-$(CONFIG_DRM_PANEL_MINGJUN_070BI30IA2) += panel-mingjun-070bi30ia2.o
+obj-$(CONFIG_DRM_PANEL_Z14INCH_22K_2240X1400_30HZ) += panel-z14inch_22k_2240x1400_30Hz.o
diff --git a/drivers/gpu/drm/panel/panel-z14inch_22k_2240x1400_30Hz.c b/drivers/gpu/drm/panel/panel-z14inch_22k_2240x1400_30Hz.c
new file mode 100644
index 000000000..917a1ee15
--- /dev/null
+++ b/drivers/gpu/drm/panel/panel-z14inch_22k_2240x1400_30Hz.c
@@ -0,0 +1,356 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (c) 2019 Radxa Limited
+ * Copyright (c) 2022 Edgeble AI Technologies Pvt. Ltd.
+ *
+ * Author:
+ * - Jagan Teki <jagan@amarulasolutions.com>
+ * - Stephen Chen <stephen@radxa.com>
+ */
+
+#include <linux/delay.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+
+#include <linux/gpio/consumer.h>
+#include <linux/regulator/consumer.h>
+
+#include <drm/drm_device.h>
+#include <drm/drm_mipi_dsi.h>
+#include <drm/drm_modes.h>
+#include <drm/drm_panel.h>
+
+#include <video/mipi_display.h>
+
+struct z14inch_22k_2240x1400_30Hz_panel_desc {
+	const struct drm_display_mode *display_mode;
+
+	unsigned long mode_flags;
+	enum mipi_dsi_pixel_format format;
+	unsigned int lanes;
+//	const struct z14inch_22k_2240x1400_30Hz_panel_cmd *on_cmds;
+	unsigned int on_cmds_num;
+};
+
+struct panel_info {
+	struct drm_panel base;
+	struct mipi_dsi_device *link;
+	const struct z14inch_22k_2240x1400_30Hz_panel_desc *desc;
+
+	struct gpio_desc	*reset;
+	struct regulator	*hsvcc;
+	struct regulator	*vspn3v3;
+
+	bool prepared;
+	bool enabled;
+};
+
+static inline struct panel_info *to_panel_info(struct drm_panel *panel)
+{
+	return container_of(panel, struct panel_info, base);
+}
+
+//static int z14inch_22k_2240x1400_30Hz_send_mipi_cmds(struct drm_panel *panel, const struct z14inch_22k_2240x1400_30Hz_panel_cmd *cmds)
+//{
+//	struct panel_info *pinfo = to_panel_info(panel);
+//	unsigned int i = 0;
+//	int err;
+//
+//	for (i = 0; i < pinfo->desc->on_cmds_num; i++) {
+//		err = mipi_dsi_dcs_write_buffer(pinfo->link, &(cmds[i].cmddata[0]), cmds[i].cmdlen);
+//		if (err < 0)
+//			return err;
+//	}
+//
+//	return 0;
+//}
+
+static int z14inch_22k_2240x1400_30Hz_disable(struct drm_panel *panel)
+{
+	struct panel_info *pinfo = to_panel_info(panel);
+	int err;
+
+	if (!pinfo->enabled)
+		return 0;
+
+	err = mipi_dsi_dcs_set_display_off(pinfo->link);
+	if (err < 0) {
+		dev_err(panel->dev, "failed to set display off: %d\n", err);
+		return err;
+	}
+
+	pinfo->enabled = false;
+
+	return 0;
+}
+
+static int z14inch_22k_2240x1400_30Hz_unprepare(struct drm_panel *panel)
+{
+	struct panel_info *pinfo = to_panel_info(panel);
+	int err;
+
+	if (!pinfo->prepared)
+		return 0;
+
+	err = mipi_dsi_dcs_set_display_off(pinfo->link);
+	if (err < 0)
+		dev_err(panel->dev, "failed to set display off: %d\n", err);
+
+	err = mipi_dsi_dcs_enter_sleep_mode(pinfo->link);
+	if (err < 0)
+		dev_err(panel->dev, "failed to enter sleep mode: %d\n", err);
+
+	/* sleep_mode_delay: 1ms - 2ms */
+	usleep_range(1000, 2000);
+
+	gpiod_set_value(pinfo->reset, 1);
+	regulator_disable(pinfo->hsvcc);
+	regulator_disable(pinfo->vspn3v3);
+
+	pinfo->prepared = false;
+
+	return 0;
+}
+
+static int z14inch_22k_2240x1400_30Hz_prepare(struct drm_panel *panel)
+{
+	struct panel_info *pinfo = to_panel_info(panel);
+	int ret;
+
+	if (pinfo->prepared)
+		return 0;
+	gpiod_set_value(pinfo->reset, 0);
+
+	/* Power the panel */
+	ret = regulator_enable(pinfo->hsvcc);
+	if (ret) {
+		dev_err(pinfo->base.dev, "Failed to enable hsvcc supply: %d\n", ret);
+		return ret;
+	}
+
+	usleep_range(1000, 2000);
+	ret = regulator_enable(pinfo->vspn3v3);
+	if (ret) {
+		dev_err(pinfo->base.dev, "Failed to enable vspn3v3 supply: %d\n", ret);
+		goto fail;
+	}
+	usleep_range(5000, 6000);
+
+	gpiod_set_value(pinfo->reset, 1);
+	msleep(180);
+
+	pinfo->prepared = true;
+
+	return 0;
+
+fail:
+	gpiod_set_value(pinfo->reset, 1);
+	regulator_disable(pinfo->hsvcc);
+	return ret;
+}
+
+static int z14inch_22k_2240x1400_30Hz_enable(struct drm_panel *panel)
+{
+	struct panel_info *pinfo = to_panel_info(panel);
+	int ret;
+
+	if (pinfo->enabled)
+		return 0;
+
+	ret = mipi_dsi_dcs_exit_sleep_mode(pinfo->link);
+	if (ret < 0) {
+		dev_err(panel->dev, "failed to exit sleep mode: %d\n", ret);
+		return ret;
+	}
+
+	msleep(120);
+
+	ret = mipi_dsi_dcs_set_display_on(pinfo->link);
+	if (ret < 0) {
+		dev_err(panel->dev, "failed to set display on: %d\n", ret);
+		return ret;
+	}
+
+	pinfo->enabled = true;
+
+	return 0;
+}
+
+static int z14inch_22k_2240x1400_30Hz_get_modes(struct drm_panel *panel,
+			       struct drm_connector *connector)
+{
+	struct panel_info *pinfo = to_panel_info(panel);
+	const struct drm_display_mode *m = pinfo->desc->display_mode;
+	struct drm_display_mode *mode;
+
+	mode = drm_mode_duplicate(connector->dev, m);
+	if (!mode) {
+		dev_err(pinfo->base.dev, "failed to add mode %ux%u@%u\n",
+			m->hdisplay, m->vdisplay, drm_mode_vrefresh(m));
+		return -ENOMEM;
+	}
+
+	drm_mode_set_name(mode);
+
+	mode->type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED;
+	drm_mode_probed_add(connector, mode);
+
+	connector->display_info.width_mm = mode->width_mm;
+	connector->display_info.height_mm = mode->height_mm;
+
+	return 1;
+}
+
+static const struct drm_panel_funcs panel_funcs = {
+	.disable = z14inch_22k_2240x1400_30Hz_disable,
+	.unprepare = z14inch_22k_2240x1400_30Hz_unprepare,
+	.prepare = z14inch_22k_2240x1400_30Hz_prepare,
+	.enable = z14inch_22k_2240x1400_30Hz_enable,
+	.get_modes = z14inch_22k_2240x1400_30Hz_get_modes,
+};
+
+static const struct drm_display_mode z14inch_22k_2240x1400_30Hz_default_mode = {
+.clock = 123750,
+.hdisplay = 2240,
+.hsync_start = 2240 + 104,
+.hsync_end = 2240 + 104 + 224,
+.htotal = 2240 + 104 + 224 + 328,
+
+.vdisplay = 1400,
+.vsync_start = 1400 + 3,
+.vsync_end = 1400 + 3 + 6,
+.vtotal = 1400 + 3 + 6 + 18,
+
+.width_mm = 62,
+.height_mm = 110,
+.flags = DRM_MODE_FLAG_NHSYNC | DRM_MODE_FLAG_NVSYNC,
+};
+
+
+static const struct z14inch_22k_2240x1400_30Hz_panel_desc z14inch_22k_2240x1400_30Hz_panel_desc = {
+	.display_mode = &z14inch_22k_2240x1400_30Hz_default_mode,
+	.mode_flags = MIPI_DSI_MODE_VIDEO | MIPI_DSI_MODE_LPM | MIPI_DSI_MODE_VIDEO_BURST,
+	.format = MIPI_DSI_FMT_RGB888,
+	.lanes = 4,
+};
+
+static const struct of_device_id panel_of_match[] = {
+	{
+		.compatible = "custom,z14inch_22k_2240x1400_30Hz",
+		.data = &z14inch_22k_2240x1400_30Hz_panel_desc,
+	},
+	{
+		/* sentinel */
+	}
+};
+MODULE_DEVICE_TABLE(of, panel_of_match);
+
+static int jd9365da_panel_add(struct panel_info *pinfo)
+{
+	struct device *dev = &pinfo->link->dev;
+	int ret;
+
+	pinfo->reset = devm_gpiod_get(dev, "reset", GPIOD_OUT_LOW);
+	if (IS_ERR(pinfo->reset))
+		return dev_err_probe(dev, PTR_ERR(pinfo->reset),
+				"Couldn't get our reset GPIO\n");
+
+	pinfo->hsvcc =  devm_regulator_get(dev, "hsvcc");
+	if (IS_ERR(pinfo->hsvcc))
+		return dev_err_probe(dev, PTR_ERR(pinfo->hsvcc),
+				"Failed to request hsvcc regulator\n");
+
+	pinfo->vspn3v3 =  devm_regulator_get(dev, "vspn3v3");
+	if (IS_ERR(pinfo->vspn3v3))
+		return dev_err_probe(dev, PTR_ERR(pinfo->vspn3v3),
+				"Failed to request vspn3v3 regulator\n");
+
+	drm_panel_init(&pinfo->base, dev, &panel_funcs,
+		       DRM_MODE_CONNECTOR_DSI);
+
+	ret = drm_panel_of_backlight(&pinfo->base);
+	if (ret)
+		return ret;
+
+	drm_panel_add(&pinfo->base);
+
+	return 0;
+}
+
+static int z14inch_22k_2240x1400_30Hz_dsi_probe(struct mipi_dsi_device *dsi)
+{
+	struct panel_info *pinfo;
+	const struct z14inch_22k_2240x1400_30Hz_panel_desc *desc;
+	int err;
+
+	pinfo = devm_kzalloc(&dsi->dev, sizeof(*pinfo), GFP_KERNEL);
+	if (!pinfo)
+		return -ENOMEM;
+
+	desc = of_device_get_match_data(&dsi->dev);
+	dsi->mode_flags = desc->mode_flags;
+	dsi->format = desc->format;
+	dsi->lanes = desc->lanes;
+	pinfo->desc = desc;
+
+	pinfo->link = dsi;
+	mipi_dsi_set_drvdata(dsi, pinfo);
+
+	err = jd9365da_panel_add(pinfo);
+	if (err < 0)
+		return err;
+
+	err = mipi_dsi_attach(dsi);
+	if (err < 0)
+		drm_panel_remove(&pinfo->base);
+
+	return err;
+}
+
+static int z14inch_22k_2240x1400_30Hz_dsi_remove(struct mipi_dsi_device *dsi)
+{
+	struct panel_info *pinfo = mipi_dsi_get_drvdata(dsi);
+	int err;
+
+	err = z14inch_22k_2240x1400_30Hz_disable(&pinfo->base);
+	if (err < 0)
+		dev_err(&dsi->dev, "failed to disable panel: %d\n", err);
+
+	err = z14inch_22k_2240x1400_30Hz_unprepare(&pinfo->base);
+	if (err < 0)
+		dev_err(&dsi->dev, "failed to unprepare panel: %d\n", err);
+
+	err = mipi_dsi_detach(dsi);
+	if (err < 0)
+		dev_err(&dsi->dev, "failed to detach from DSI host: %d\n", err);
+
+	drm_panel_remove(&pinfo->base);
+
+	return 0;
+}
+
+static void jd9365da_panel_shutdown(struct mipi_dsi_device *dsi)
+{
+	struct panel_info *pinfo = mipi_dsi_get_drvdata(dsi);
+
+	z14inch_22k_2240x1400_30Hz_disable(&pinfo->base);
+	z14inch_22k_2240x1400_30Hz_unprepare(&pinfo->base);
+}
+
+static struct mipi_dsi_driver z14inch_22k_2240x1400_30Hz_driver = {
+	.driver = {
+		.name = "z14inch_22k_2240x1400_30Hz",
+		.of_match_table = panel_of_match,
+	},
+	.probe = z14inch_22k_2240x1400_30Hz_dsi_probe,
+	.remove = z14inch_22k_2240x1400_30Hz_dsi_remove,
+	.shutdown = jd9365da_panel_shutdown,
+};
+module_mipi_dsi_driver(z14inch_22k_2240x1400_30Hz_driver);
+
+MODULE_AUTHOR("Jagan Teki <jagan@edgeble.ai>");
+MODULE_AUTHOR("Stephen Chen <stephen@radxa.com>");
+MODULE_DESCRIPTION("Jadard JD9365DA-H3 WXGA DSI panel");
+MODULE_LICENSE("GPL");
-- 
2.34.1

